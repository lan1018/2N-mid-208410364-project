{"version":3,"sources":["images64/1.PNG","images64/2.PNG","images64/3.PNG","images64/4.PNG","images64/5.PNG","images64/6.PNG","images64/7.PNG","images64/8.PNG","images64/9.PNG","images64/10.PNG","serviceWorker.js","Card64.js","CardList64.js","pt64.js","SearchBox.js","App64.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Card","img","name","email","className","src","CardList","pt","map","user","i","key","id","a1","a2","a3","a4","a5","a6","a7","a8","a9","a10","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchPlace","target","value","state","pt64","filteredPt","this","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,kICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wCCJSC,G,MAVF,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACvB,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAKJ,IACV,4BAAKC,GACL,2BAAIC,MCaDG,EAnBE,SAAC,GAAY,IAAVC,EAAS,EAATA,GAChB,OACI,6BACKA,EAAGC,KAAI,SAACC,EAAMC,GACX,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLE,GAAIH,EAAKG,GACTV,KAAMO,EAAKP,KACXD,IAAKQ,EAAKR,W,sKCDrBM,EAAK,CACd,CACIK,GAAI,EACJV,KAAM,SACND,IAAKY,KAET,CACID,GAAI,EACJV,KAAM,OACND,IAAKa,KAET,CACIF,GAAI,EACJV,KAAM,aACND,IAAKc,KAET,CACIH,GAAI,EACJV,KAAM,YACND,IAAKe,KAET,CACIJ,GAAI,EACJV,KAAM,eACND,IAAKgB,KAET,CACIL,GAAI,EACJV,KAAM,eACND,IAAKiB,KAET,CACIN,GAAI,EACJV,KAAM,eACND,IAAKkB,KAET,CACIP,GAAI,EACJV,KAAM,UACND,IAAKmB,KAET,CACIR,GAAI,EACJV,KAAM,YACND,IAAKoB,KAET,CACIT,GAAI,GACJV,KAAM,eACND,IAAKqB,MC9CEC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACA,yBAAKpB,UAAU,QACd,2BACCA,UAAU,iCACVqB,KAAK,SACLC,YAAY,cACZC,SAAUH,MC2BDI,G,uDA5BX,aAAe,IAAD,8BACV,gBAMJC,eAAiB,SAAAC,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAN1C,EAAKC,MAAQ,CACTC,KAAM7B,EACNyB,YAAa,IAJP,E,qDAWJ,IAAD,OACCK,EAAaC,KAAKH,MAAMC,KAAKG,QAAO,SAAAhC,GACtC,OAAOA,EAAGL,KACTsC,cACAC,SAAS,EAAKN,MAAMH,YAAYQ,kBAGzC,OACA,yBAAKpC,UAAU,MACf,yEACE,kBAAC,EAAD,CAAWoB,aAAcc,KAAKT,iBAC9B,kBAAC,EAAD,CAAUtB,GAAI8B,IAHhB,S,GApBcK,cCClBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SN0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d553df66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.5de72de3.PNG\";","module.exports = __webpack_public_path__ + \"static/media/2.ce52dd85.PNG\";","module.exports = __webpack_public_path__ + \"static/media/3.06da98f8.PNG\";","module.exports = __webpack_public_path__ + \"static/media/4.20e33019.PNG\";","module.exports = __webpack_public_path__ + \"static/media/5.46b3c160.PNG\";","module.exports = __webpack_public_path__ + \"static/media/6.367dbc3d.PNG\";","module.exports = __webpack_public_path__ + \"static/media/7.ed24d2fc.PNG\";","module.exports = __webpack_public_path__ + \"static/media/8.22b00654.PNG\";","module.exports = __webpack_public_path__ + \"static/media/9.c6a3a188.PNG\";","module.exports = __webpack_public_path__ + \"static/media/10.67a9113f.PNG\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './demo64.css';\r\n\r\n\r\nconst Card = ({ img, name, email }) => {\r\n    return (\r\n        <div className='bg-light-blue dib br4 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={img}></img>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card64'\r\n\r\nconst CardList = ({ pt }) => {\r\n    return (\r\n        <div>\r\n            {pt.map((user, i) => {\r\n                return (\r\n                    <Card\r\n                        key={i}\r\n                        id={user.id}\r\n                        name={user.name}\r\n                        img={user.img}\r\n                    />\r\n                )\r\n            })\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n\r\n","import a1 from './images64/1.PNG'\r\nimport a2 from './images64/2.PNG'\r\nimport a3 from './images64/3.PNG'\r\nimport a4 from './images64/4.PNG'\r\nimport a5 from './images64/5.PNG'\r\nimport a6 from './images64/6.PNG'\r\nimport a7 from './images64/7.PNG'\r\nimport a8 from './images64/8.PNG'\r\nimport a9 from './images64/9.PNG'\r\nimport a10 from './images64/10.PNG'\r\n\r\nexport const pt = [\r\n    {\r\n        id: 1,\r\n        name: 'Nature',\r\n        img: a1\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'City',\r\n        img: a2\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Calculator',\r\n        img: a3\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Greetings',\r\n        img: a4\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Kill Monster',\r\n        img: a5\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Music Player',\r\n        img: a6\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Love Stories',\r\n        img: a7\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Reports',\r\n        img: a8\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Knowledge',\r\n        img: a9\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Video Player',\r\n        img: a10\r\n    }\r\n];","import React from 'react';\r\nconst SearchBox = ({ searchChange }) => {  \r\n    return (    \r\n    <div className='pa2 '>     \r\n     <input     \r\n      className='pa3  b--black bg-lightest-blue'        \r\n      type='search'        \r\n      placeholder='search demo'\r\n      onChange={searchChange}      \r\n      />    \r\n      </div>  \r\n      );\r\n    };\r\n    \r\nexport default SearchBox;\r\n","import React,  { Component } from 'react';\r\nimport CardList from './CardList64';\r\nimport { pt } from './pt64';\r\nimport SearchBox from './SearchBox';\r\nimport './index64.css';\r\n\r\nclass App extends Component {  \r\n    constructor() {    \r\n        super();    \r\n        this.state = {      \r\n            pt64: pt,      \r\n            searchPlace: ''    \r\n        };  \r\n    }  \r\n    onSearchChange = event => {    \r\n        this.setState({ searchPlace: event.target.value });  \r\n    };  \r\n\r\n    render() {    \r\n        const filteredPt = this.state.pt64.filter(pt => {      \r\n            return pt.name        \r\n            .toLowerCase()        \r\n            .includes(this.state.searchPlace.toLowerCase());    \r\n        });\r\n    \r\n    return (\r\n    <div className='tc'>      \r\n    <h1>208410364-藍冠勛-demo project</h1>\r\n      <SearchBox searchChange={this.onSearchChange}/>      \r\n      <CardList pt={filteredPt} />;    \r\n      </div>  \r\n    );\r\n}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App64';\nimport './index64.css';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n  // <React.StrictMode>\n  //   <div>\n  //     <CardList robots={robots} />\n  //   </div>\n  // </React.StrictMode>,\n  // document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}